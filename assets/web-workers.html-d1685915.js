import{_ as a,p as n,q as s,a1 as e}from"./framework-11e2b124.js";const t={},r=e(`<h1 id="web-workers" tabindex="-1"><a class="header-anchor" href="#web-workers" aria-hidden="true">#</a> Web Workers</h1><p><code>Web Workers</code> 是 JavaScript API 中的一项技术，它允许我们在浏览器中创建多个线程，以便能够同时执行多个任务而不会影响 UI 的响应速度。</p><p><code>Web Workers</code> 的工作方式是创建一个新的线程，该线程可以执行 JavaScript 代码，但与主线程是相互独立的。这意味着主线程和工作线程可以同时运行，而不会相互阻塞。</p><h2 id="创建-web-worker" tabindex="-1"><a class="header-anchor" href="#创建-web-worker" aria-hidden="true">#</a> 创建 Web Worker</h2><p>要创建 Web Worker，我们可以使用 Worker 构造函数。该构造函数需要一个 JavaScript 文件的 URL 作为参数，该文件将在工作线程中运行。以下是一个创建 Web Worker 的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的示例中，我们使用 Worker 构造函数创建了一个新的 Web Worker，并将 worker.js 文件作为参数传递给它。</p><h2 id="发送消息" tabindex="-1"><a class="header-anchor" href="#发送消息" aria-hidden="true">#</a> 发送消息</h2><p>要向 Web Worker 发送消息，我们可以使用 postMessage 方法。以下是一个发送消息给 Web Worker 的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, worker!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的示例中，我们向 Web Worker 发送了一条消息，消息内容为字符串 <code>&#39;Hello, worker!&#39;</code>。</p><h2 id="接收消息" tabindex="-1"><a class="header-anchor" href="#接收消息" aria-hidden="true">#</a> 接收消息</h2><p>要从 Web Worker 接收消息，我们可以为 Worker 对象添加一个 message 事件监听器。以下是一个接收来自 Web Worker 的消息的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>worker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Received message from worker: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，我们为 Worker 对象添加了一个 message 事件监听器，当 Web Worker 发送消息时，该监听器将被触发，我们可以在监听器中访问 event.data 属性来获取消息内容。</p><h2 id="终止-web-worker" tabindex="-1"><a class="header-anchor" href="#终止-web-worker" aria-hidden="true">#</a> 终止 Web Worker</h2><p>要终止 Web Worker，我们可以使用 terminate 方法。以下是一个终止 Web Worker 的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的示例中，我们使用 terminate 方法终止了 Web Worker 的执行。注意，一旦终止 Web Worker，它就无法恢复执行。</p>`,19),o=[r];function p(c,i){return n(),s("div",null,o)}const u=a(t,[["render",p],["__file","web-workers.html.vue"]]);export{u as default};
